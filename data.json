{
    "collections": [
        {
            "name": "File Handling",
            "snippets": [
                {
                    "title": "Write a C program to write a character and display it using fgetc() and fputc() functions.",
                    "code": "#include<stdio.h>\nint main(){\n    FILE *fp;\n    char ch, c;\n    fp = fopen(\"./filechar.txt\", \"w+\");\n    printf(\"Enter a character: \");\n    scanf(\"%s\", &ch);\n    fputc(ch, fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    c = fgetc(fp);\n    printf(\"The entered character is %c\", c);\n    printf(\"\\nProgram executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/1_output.PNG",
                    "fileImage": "./assets/filehandling_ii/1_file.PNG"
                },
                {
                    "title": "Write a C program to write a number and display it using getw() and putw() functions.",
                    "code": "#include<stdio.h>\n\nint main(){\n    FILE *fp;\n    int n,n1;\n    fp = fopen(\"./fileint.txt\",\"w+\");\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&n);\n    putw(n,fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    n1 = getw(fp);\n    printf(\"The entered number is %d\\n\",n1);\n    printf(\"Program executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/2_output.PNG",
                    "fileImage": "./assets/filehandling_ii/2_file.PNG"
                }
            ]
        },
        {
            "name": "Dynamic Memory Allocation",
            "snippets": [
                {
                    "title": "Write a C program to demonstrate the use of malloc() and free().",
                    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(){\n    int *ptr;\n    ptr = (int*)malloc(5 * sizeof(int));\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    printf(\"Stored values: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}",
                    "outputImage": "./assets/malloc_output.PNG",
                    "fileImage": "./assets/malloc_file.PNG"
                }
            ]
        },
        {
            "name":"C programmin",
            "snippets":[
                {
                    "title":"",
                    "code":"",
                    "outpuImage":"",
                    "fileImage":"",
                }
                 {
                    "title":" 55.Explain all the types of string handling functions in brief.-by Prajwol Chapagaee",
                    "code":"  {
  "text": "String handling functions are essential for working with strings in programming as they encompass broad types of operations to manipulate, search, and modify string data. On the basis of the type of operation, string handling functions have been categorized as follows:\n\n1. Length Functions: These provide the measure of the size of a string. The number of characters, excluding the null terminator, is determined by `strlen()`, while `sizeof()` gives the total size of a string, counting the null terminator, in the language, such as C.\n\n2. Character Search Functions: These are functions that search a string for a character. The functions `strchr()` find the first occurrence of a character, `strrchr()` finds the last occurrence, and `strstr()` searches a string for another substring.\n\n3. String Manipulation Functions: Functions that perform operations on strings. For example, `strcat()`, which is used to concatenate two strings, and `strncat()`, used to append a given number of characters from one string to another.\n\n4. String Comparison Functions: These compare two strings. For instance, the `strcmp()` function compares two strings in dictionary order (in alphabetical order), while `strncmp()` compares a specified number of characters of both strings.\n\n5. String Copy Functions: In order to copy one string into another, one needs the help of these functions. For example, `strcpy()` copies an entire string, since `strncpy()` copies just a specific number of characters from one string to the other, which also helps in circumventing buffer overflow.\n\nThese string handling functions are critical for string searching, modification, and comparison, enabling the effective manipulation of strings in programming."
}
 ",
                    "outpuImage":"",
                    "fileImage":"",
                }
            ]
        }
    ]
}
