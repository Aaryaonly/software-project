{
    "collections": [
        {
            "name": "File Handling",
            "snippets": [
                {
                    "title": "Write a C program to write a character and display it using fgetc() and fputc() functions.",
                    "code": "#include<stdio.h>\nint main(){\n    FILE *fp;\n    char ch, c;\n    fp = fopen(\"./filechar.txt\", \"w+\");\n    printf(\"Enter a character: \");\n    scanf(\"%s\", &ch);\n    fputc(ch, fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    c = fgetc(fp);\n    printf(\"The entered character is %c\", c);\n    printf(\"\\nProgram executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/1_output.PNG",
                    "fileImage": "./assets/filehandling_ii/1_file.PNG"
                },
                {
                    "title": "Write a C program to write a number and display it using getw() and putw() functions.",
                    "code": "#include<stdio.h>\n\nint main(){\n    FILE *fp;\n    int n,n1;\n    fp = fopen(\"./fileint.txt\",\"w+\");\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&n);\n    putw(n,fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    n1 = getw(fp);\n    printf(\"The entered number is %d\\n\",n1);\n    printf(\"Program executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/2_output.PNG",
                    "fileImage": "./assets/filehandling_ii/2_file.PNG"
                }
            ]
        },
        {
            "name": "Dynamic Memory Allocation",
            "snippets": [
                {
                    "title": "Write a C program to demonstrate the use of malloc() and free().",
                    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(){\n    int *ptr;\n    ptr = (int*)malloc(5 * sizeof(int));\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    printf(\"Stored values: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}",
                    "outputImage": "./assets/malloc_output.PNG",
                    "fileImage": "./assets/malloc_file.PNG"
                }
            ]
        },
        {
            "name":"C programmin",
            "snippets":[
                {
                    "title":"What are compound statements? What is the advantage of an array over individual variables?",
                    "code":"A compound statement in C is defined using braces {} to group multiple statements together. It allows you to execute several statements as a single block, which is particularly useful in control structures like if, for, and while.

Example:

if (condition) {
    // This is a compound statement
    statement1();
    statement2();
}
Advantages of Arrays Over Individual Variables in C
Organization: Arrays allow you to store multiple related values under a single name, making your code cleaner and more manageable.
Index-Based Access: You can access elements using an index, which simplifies the retrieval and manipulation of data.

int arr[5] = {1, 2, 3, 4, 5};
int value = arr[2]; // Accessing the third element
Iteration: Arrays can be easily traversed using loops, allowing for efficient operations on multiple elements.

for (int i = 0; i < 5; i++) {
    printf("%d ", arr[i]); // Print all elements
}
Memory Efficiency: Arrays can lead to more efficient memory usage, especially when dealing with large datasets, as they store data in contiguous memory locations.
Dynamic Allocation: Using pointers, you can create dynamic arrays that can grow or shrink as needed, providing flexibility in data management.

int *arr = malloc(size * sizeof(int)); // Dynamic array allocation
Performance: Accessing elements of an array is generally faster than accessing multiple individual variables due to better locality of reference in memory.
These characteristics make arrays a powerful tool in C programming, enabling better data handling and manipulation.",
                    "outpuImage":"",
                    "fileImage":"./assets/ss06,png",
                }
            ]
        }
    ]
}
