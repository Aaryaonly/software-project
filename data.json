{
    "collections": [
        {
            "name": "File Handling",
            "snippets": [
                {
                    "title": "Write a C program to write a character and display it using fgetc() and fputc() functions.",
                    "code": "#include<stdio.h>\nint main(){\n    FILE *fp;\n    char ch, c;\n    fp = fopen(\"./filechar.txt\", \"w+\");\n    printf(\"Enter a character: \");\n    scanf(\"%s\", &ch);\n    fputc(ch, fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    c = fgetc(fp);\n    printf(\"The entered character is %c\", c);\n    printf(\"\\nProgram executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/1_output.PNG",
                    "fileImage": "./assets/filehandling_ii/1_file.PNG"
                },
                {
                    "title": "Write a C program to write a number and display it using getw() and putw() functions.",
                    "code": "#include<stdio.h>\n\nint main(){\n    FILE *fp;\n    int n,n1;\n    fp = fopen(\"./fileint.txt\",\"w+\");\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&n);\n    putw(n,fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    n1 = getw(fp);\n    printf(\"The entered number is %d\\n\",n1);\n    printf(\"Program executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/2_output.PNG",
                    "fileImage": "./assets/filehandling_ii/2_file.PNG"
                }
            ]
        },
        {
            "name": "Dynamic Memory Allocation",
            "snippets": [
                {
                    "title": "Write a C program to demonstrate the use of malloc() and free().",
                    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(){\n    int *ptr;\n    ptr = (int*)malloc(5 * sizeof(int));\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    printf(\"Stored values: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}",
                    "outputImage": "./assets/malloc_output.PNG",
                    "fileImage": "./assets/malloc_file.PNG"
                }
            ]
        },
        {
            "name":"C programmin",
            "snippets":[
                   {
                    "title":"What is user-defined function? Explain all the types of user-defined functions in brief with a suitable program of each. - Aadarsh Thakur, 701",
                    "code": "#include<stdio.h>\n\n// A user-defined function is a function that is defined by the programmer to perform a specific task.\n// It allows breaking down a complex problem into smaller, manageable pieces of code.\n\n// 1. Function without arguments and without return value\n// This type of function does not take any input parameters and does not return any value.\n// It simply performs a task, such as displaying a message or performing an operation.\nvoid displayMessage() {\n    printf(\"Hello, this is question no 1.\\n\");\n}\n\n// 2. Function with arguments but without return value\n// This type of function takes input parameters, performs an operation using those parameters,\n// but does not return a value. It might, for example, display a result or perform some action.\nvoid addNumbers(int a, int b) {\n    printf(\"Sum: %d\\n\", a + b);\n}\n\n// 3. Function without arguments but with return value\n// This type of function does not take any parameters but returns a value to the calling function.\n// For example, it could perform a calculation and return the result.\nint getNumber() {\n    return 10;  // Returns a constant value.\n}\n\n// 4. Function with arguments and with return value\n// This function takes input parameters, performs an operation using those parameters, \n// and returns a value. It combines both input and output functionality.\nint multiplyNumbers(int a, int b) {\n    return a * b;  // Returns the result of multiplying two numbers.\n}\n\nint main() {\n    // Function without arguments and without return value\n    displayMessage();  // Calls the displayMessage function to print a message\n\n    // Function with arguments but without return value\n    addNumbers(5, 3);  // Passes 5 and 3 as arguments to the addNumbers function\n\n    // Function without arguments but with return value\n    printf(\"Returned number: %d\\n\", getNumber());  // Calls getNumber() and prints the returned value\n\n    // Function with arguments and with return value\n    printf(\"Multiplication result: %d\\n\", multiplyNumbers(4, 2));  // Passes 4 and 2 to multiplyNumbers and prints the result\n\n    return 0;\n}\n\n/* \nExplanation of Types of User-Defined Functions:\n1. Function without arguments and without return value:\n   - Takes no input and does not return any value.\n   - Example: displayMessage().\n\n2. Function with arguments but without return value:\n   - Takes input parameters but does not return any result.\n   - Example: addNumbers(int a, int b).\n\n3. Function without arguments but with return value:\n   - Takes no input but returns a value.\n   - Example: getNumber().\n\n4. Function with arguments and with return value:\n   - Takes input parameters and returns a value.\n   - Example: multiplyNumbers(int a, int b).\n*/",
                    "outputImage":".//assets/filehandling_ii/qno1.png",
                    "fileImage":""
                }
            ]
        }
    ]
}
