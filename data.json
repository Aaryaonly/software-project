{
    "collections": [
        {
            "name": "File Handling",
            "snippets": [
                {
                    "title": "Write a C program to write a character and display it using fgetc() and fputc() functions.",
                    "code": "#include<stdio.h>\nint main(){\n    FILE *fp;\n    char ch, c;\n    fp = fopen(\"./filechar.txt\", \"w+\");\n    printf(\"Enter a character: \");\n    scanf(\"%s\", &ch);\n    fputc(ch, fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    c = fgetc(fp);\n    printf(\"The entered character is %c\", c);\n    printf(\"\\nProgram executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/1_output.PNG",
                    "fileImage": "./assets/filehandling_ii/1_file.PNG"
                },
                {
                    "title": "Write a C program to write a number and display it using getw() and putw() functions.",
                    "code": "#include<stdio.h>\n\nint main(){\n    FILE *fp;\n    int n,n1;\n    fp = fopen(\"./fileint.txt\",\"w+\");\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&n);\n    putw(n,fp);\n    printf(\"Reading the file\\n\");\n    rewind(fp);\n    n1 = getw(fp);\n    printf(\"The entered number is %d\\n\",n1);\n    printf(\"Program executed by darshan subedi XII 746\");\n}",
                    "outputImage": "./assets/filehandling_ii/2_output.PNG",
                    "fileImage": "./assets/filehandling_ii/2_file.PNG"
                }
            ]
        },
        {
            "name": "Dynamic Memory Allocation",
            "snippets": [
                {
                    "title": "Write a C program to demonstrate the use of malloc() and free().",
                    "code": "#include<stdio.h>\n#include<stdlib.h>\n\nint main(){\n    int *ptr;\n    ptr = (int*)malloc(5 * sizeof(int));\n    if (ptr == NULL) {\n        printf(\"Memory allocation failed!\\n\");\n        return 1;\n    }\n    for (int i = 0; i < 5; i++) {\n        ptr[i] = i + 1;\n    }\n    printf(\"Stored values: \");\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", ptr[i]);\n    }\n    free(ptr);\n    return 0;\n}",
                    "outputImage": "./assets/malloc_output.PNG",
                    "fileImage": "./assets/malloc_file.PNG"
                }
            ]
        },
        {
            "name":"C programmin",
            "snippets":[
                {
                    "title":"What are variables and in what way is it different from constants? How do you access the values within an array?",
                    "code": "Variables:\nA variable is a named storage location in a computer's memory that can hold a value. The defining characteristic of a variable is that its value can be changed during the execution of a program. In the C programming language, variables must be declared with a specific data type, which dictates the kind of values they can hold. For example, an integer variable can be declared as follows:\n\nint x = 10; // Here, 'x' is a variable that holds the value 10.\n\nConstants:\nIn contrast, a constant is a value that cannot be altered once it has been assigned. Constants are useful for defining fixed values that should remain unchanged throughout the program. In C, constants can be declared using the const keyword. For example:\n\nconst int MAX_VALUE = 100; // 'MAX_VALUE' is a constant that holds the value 100.\n\nDifferences Between Variables and Constants\nMutability:\nVariables can change their values during program execution.\nConstants maintain the same value throughout the program.\n\nDeclaration:\nVariables are declared with their data types and can be re-assigned.\nConstants are declared using the const keyword and cannot be re-assigned.\n\nAccessing Values in an Array\nIn C, an array is a collection of elements of the same data type, stored in contiguous memory locations. To access the elements of an array, you use indices, which start from 0. For example, consider the following array declaration and element access:\n\n#include <stdio.h>\n\nint main() {\n    int myArray[4] = {10, 20, 30, 40}; // Declaration of an array\n\n    // Accessing array elements:\n    printf(\"%d\\n\", myArray[0]); // Output: 10 (first element)\n    printf(\"%d\\n\", myArray[1]); // Output: 20 (second element)\n    printf(\"%d\\n\", myArray[2]); // Output: 30 (third element)\n    printf(\"%d\\n\", myArray[3]); // Output: 40 (fourth element)\n\n    return 0;\n}\n\nConclusion\nIn summary, variables are mutable storage locations that can change over time, while constants are immutable values that remain constant. Arrays in C allow for the storage and access of multiple values using indices, enabling efficient data management and retrieval.",
                    "outpuImage":"",
                    "fileImage":""
                }
            ]
        }
    ]
}
