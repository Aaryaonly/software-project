{  
"collections": [  
    {
      "name": "C programming",
      "snippets": [
        {
          "title": "What is the difference between the = symbol and == symbol? What is the modulus operator? (By- Aadarsha Kafle 703)",
          "code": "1. = (Assignment Operator):\n\n   a. The = symbol in C is known as the assignment operator. It is used to assign a value to a variable.\n\n   b. When you use =, you are telling the program to store the value on the right-hand side of the operator into the variable on the left-hand side.\n\n   c. This operator is essential for assigning values to variables during the program's execution.\n\n2. == (Equality Comparison Operator):\n\n   a. The == symbol in C is known as the equality comparison operator. It is used to compare two values to check if they are equal.\n\n   b. The == operator evaluates to true (1) if the values on both sides are equal and false (0) if they are not equal.\n\n   c. This operator is commonly used in conditional statements, such as if conditions, to check whether two values are identical.\n\nThe modulus operator (%) in C is used to find the remainder of a division operation. It divides the number on the left-hand side by the number on the right-hand side and returns the remainder. This operator is useful for tasks like checking if a number is even or odd. For example, x % 2 == 0 checks if x is even. It is commonly used in loops and conditions for cyclic operations.",
          "outputImage": "",
          "fileImage": ""
        },
        {
            "title": "30. Write down the differences between call by value and call by reference.-Aryan Thapaliya",
            "code": "This question doesnot require code to be written. View the output!",
            "outputImage": "./assets/filehandling_ii/answer.PNG",
            "fileImage": "./assets/filehandling_ii/answer.PNG"
            
        },
        {
          "title": "Write a C program to sort the elements of an array in descending order. (Binam Adhikari)",
          "code": "#include <stdio.h>\n\nvoid sortDescending(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if (arr[i] < arr[j]) {\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {64, 34, 25, 12, 22, 11, 90};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    sortDescending(arr, n);\n\n    printf(\"Sorted array in descending order: \\n\");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    return 0;\n}",
          "outputImage": "./assets/53.png",
          "fileImage": ""
        },
        {
          "title": "What is file handling? Explain the types of file handling mode in brief. Write a C program to write a character and display it using fgetc () and fputc () functions. [Biraj Bhusal (741)]",
          "code": "File handling is the process of creating, opening, reading, writing, and closing files in a program. It allows data to be stored permanently in secondary storage, making it possible to save and retrieve information across different executions of a program.\nFile handling modes define how a file is accessed in a program. There are 12 different modes, each serving a specific purpose for reading, writing, or appending data. Below is a brief explanation of each mode:\n\n1. \"r\" (Read Mode): This mode is used to open an existing file for reading only. If the file does not exist, the function returns NULL. The file pointer is positioned at the beginning of the file, and attempting to write to the file in this mode will result in an error.\n\n2. \"w\" (Write Mode): This mode opens a file for writing, creating a new file if it does not exist. If the file already exists, its content is erased, and new data is written from the beginning. Since it only supports writing, attempting to read from the file in this mode will lead to an error.\n\n3. \"a\" (Append Mode): This mode opens a file for appending data at the end. If the file does not exist, it creates a new one. Unlike \"w\", it does not erase existing content but only allows adding new data at the end.\n\n4. \"rb\" (Read Binary Mode): Similar to \"r\", but used for reading binary files like images, audio, and video. The file must exist; otherwise, the function returns NULL. It reads data in binary form, preserving its original structure.\n\n5. \"wb\" (Write Binary Mode): This mode is used to create a new binary file or overwrite an existing one. It writes data in binary format instead of text. If the file already exists, all previous content is erased.\n\n6. \"ab\" (Append Binary Mode): This mode opens a binary file to add new data at the end. If the file does not exist, a new one is created. Unlike \"wb\", it does not delete previous content but appends new binary data.\n\n7. \"r+\" (Read and Write Mode): This mode allows both reading and writing to a file. The file must already exist; otherwise, it returns an error. The file pointer is positioned at the beginning, allowing updates to existing content.\n\n8. \"w+\" (Write and Read Mode): This mode creates a new file or overwrites an existing one, allowing both reading and writing. Since the existing content is deleted, it is useful when fresh data needs to be stored. The file pointer is positioned at the beginning.\n\n9. \"a+\" (Append and Read Mode): This mode allows both reading and appending to a file. If the file does not exist, it creates a new one. Reading starts from the beginning, but writing always happens at the end without deleting previous content.\n\n10. \"rb+\" (Read and Write Binary Mode): This mode is similar to \"r+\", but for binary files. It allows reading and modifying existing binary files without deleting their content. The file must already exist, or an error is returned.\n\n11. \"wb+\" (Write and Read Binary Mode): This mode creates a new binary file or overwrites an existing one, allowing both reading and writing. Any existing content is erased, making it useful for fresh binary data storage. The file pointer starts at the beginning.\n\n12. \"ab+\" (Append and Read Binary Mode): This mode allows reading and appending to a binary file. If the file exists, new data is added at the end, while reading is possible from the beginning. If the file does not exist, a new one is created.\n\nThese file handling modes help manage data efficiently, whether dealing with text or binary files, ensuring proper access according to the required operation.\n\n Code:\n #include <stdio.h>\nint main() {\nFILE *fp;\nchar c;\nfp = fopen(\"D:\\\\biraj.txt\", \"w\");\nif (fp == NULL) {\nprintf(\"Could not open file\\n\");\nreturn 1;\n}\nc = 'A';\nfputc(c, fp);\nfclose(fp);\nfp = fopen(\"D:\\\\biraj.txt\", \"r\");\nif (fp == NULL) {\nprintf(\"Could not open file\\n\");\nreturn 1;\n}\nc = fgetc(fp);\nprintf(\"The character is: %c\\n\", c);\nfclose(fp);\nprintf(\"\\n\\nDone by: Biraj Bhusal\");\nreturn 0;\n}",
          "outputImage": "./assets/filehandling_ii/41_outputimage.png",
          "fileImage": "./assets/filehandling_ii/41_fileimage.png"
        },
        {
          "title": "Write a C program to append content to an existing file. Dikshyanta Karki (749)",
          "code": "#include <stdio.h>\n\nint main() {\n    FILE *file;\n    char content[] = \"This is the appended content.\";\n    file = fopen(\"existing.txt\", \"a\");\n    if (file == NULL) {\n        printf(\"Error opening file for appending.\");\n        return 1;\n    }\n    fprintf(file, \"%s\", content);\n    fclose(file);\n    return 0;\n}",
          "outputImage": "./assets/filehandling_ii/49_output.png",
          "fileImage": "./assets/filehandling_ii/49_output2.png"
        },
        {
          "title": "Write a C program to calculate the sum of n natural numbers. Ambu shree",
          "code": "//Write a program using user-defined function to find the sum of N natural numbers.\n//DONE BY AMBU SHREE POUDEL (723)\n#include <stdio.h>\n\nint main() {\n    int n, sum;\n\n    // Input the value of n\n    printf(\"Enter a positive integer: \");\n    scanf(\"%d\", &n);\n\n    sum = n * (n + 1) / 2;\n\n    printf(\"Sum of first %d natural numbers is: %d\\n\", n, sum);\n\n    return 0;\n}",
          "outputImage": "./assets/filehandling_ii/sumof_n_natural_number.png",
          "fileImage": ""
        },
        {
          "title": "What are unary and ternary operators? Explain all the types of operators in brief. (Abiral Kharel)",
          "code": "Unary operators are those operators which require only one operand to execute their respective operations. In C-Programming Language, unary operators include ++, --, and sizeof(). \n\n++ operator:\nThis operator, also known as the increment operator, is used to increase a number or any other numerical value by 1. This operator can be used in two types of ways, pre or post. Pre-increment operator is the usage of this operator in which the operator is put in front of the operand (++a), whereas, post-increment operator is used by putting the operator after the operand(a++). \n\n-- operator:\nSimilar to the increment operator, the decrement operator is used to decrease a numerical value by 1. This operator is also used in two ways, pre and post. The pre usage is the one in which the operator is put in front of the operand(--a) and post-decrement operator is the one in which the operator is put behind the operand for the operation(a--). \n\nIn C, the pre-increment operator (++i) is used when we want to increase the value of a variable before using it in an expression. On the other hand, the post-increment operator (i++) is used when we want to increase the value of a variable after using it in an expression.\n\nTernary operators are those types of operators which require three operands to execute their function. They are also called conditional operators. ‘?:’ is the only ternary operator used in C.\n\n?: operator:\nWhenever a program executes conditionally according to a particular statement, then we use conditional operators. Let us consider an example. Suppose Expression1 is the condition to be evaluated. If the condition(Expression1) is true then it will execute and return the result of Expression2 otherwise if the condition(Expression1) is false then it will execute and return the result of Expression3.\n\nExample:\nCondition ? True : False\nmax = num1 > num2 ? num1 : num2;\n\nBinary operators are those types of operators which require two operands to function/ execute their operations. Binary operators include +, -, *, /, %, &&, || etc. It is the most commonly used type of operator in the C-Language. Its types include Arithmetic Operators(+, -, *, /), Logical Operators(||, &&, !=, ==), Assignment Operators(=, +=, -=), Relational Operators(<, >, <=, >=), etc.",
          "outputImage": "",
          "fileImage": ""
        },
         {
          "title": "What is debugging? What does the && operator do in a program code? (Aarshu shakya)",
          "code": "Debugging is the process of identifying, isolating, and fixing bugs or errors in a program's code. It involves tracking down issues that prevent the program from working as expected, whether those issues are logic errors, syntax errors, or runtime errors. The goal is to ensure the code functions correctly and efficiently. Debugging can be done manually by reviewing the code, or by using debugging tools that help trace execution, inspect variable values, and pinpoint problem areas.\nAs for the && operator, it's a logical AND operator used in many programming languages (such as C, C++, Java, JavaScript, Python, etc.). It evaluates two conditions and returns true only if both conditions are true. If either condition is false, the whole expression returns false. The exampe of its code is given below.",
          "outputImage": "./assets/filehandling_ii/Example.png",
           "fileImage": ""
        },
        {
                    "title":"Write a program using user-defined function to check whether the given year is leap year or not. (Aman Kumar Yadav)",
                    "code":"assets/filehandling_ii/Aman-22_C.png",
                    "outpuImage":"assets/filehandling_ii/Aman-22_Output.png",
                    "fileImage" : ""
                }
      ]
    }
  ]

}
